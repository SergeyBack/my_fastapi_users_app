services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "echo 'import socket; socket.create_connection((\"localhost\", 5672))' | python3"]
      interval: 10s
      timeout: 5s
      retries: 10


  app:
    build:
      dockerfile: ./Dockerfile
      context: ./
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://postgres:password@pg:5432/shop
      APP_CONFIG__DB__ECHO: 0
      APP_CONFIG__GUNICORN_WORKERS: 4
      APP_CONFIG__ACCESS_TOKEN__RESET_PASSWORD_TOKEN_SECRET: ee3191d2dcee76f437b354863bc838f6a54896d4232d6496edb322c1a9db272c
      APP_CONFIG__ACCESS_TOKEN__VERIFICATION_TOKEN_SECRET: e93b4be4d86311556620ff846003ed3d842c0f939434a4e21b12b1e73a79c059
      BROKER_URL: amqp://guest:guest@rabbitmq:5672// 
    ports:
      - "8000:8000"
    depends_on:
      pg:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./fastapi-application
          target: /app
        - action: rebuild
          path: ./poetry.lock


  worker:
    build:
      dockerfile: ./Dockerfile
      context: ./
    command: taskiq worker core:broker --no-configure-logging --fs-discover --tasks-pattern "**/tasks"
    environment:
      # Добавьте те же переменные, что и для app
      APP_CONFIG__DB__URL: postgresql+asyncpg://postgres:password@pg:5432/shop
      APP_CONFIG__DB__ECHO: 0
      APP_CONFIG__ACCESS_TOKEN__RESET_PASSWORD_TOKEN_SECRET: ee3191d2dcee76f437b354863bc838f6a54896d4232d6496edb322c1a9db272c
      APP_CONFIG__ACCESS_TOKEN__VERIFICATION_TOKEN_SECRET: e93b4be4d86311556620ff846003ed3d842c0f939434a4e21b12b1e73a79c059
      BROKER_URL: amqp://guest:guest@rabbitmq:5672//
    depends_on:
      rabbitmq:
        condition: service_healthy


  maildev:
    image: maildev/maildev
    environment:
      - TZ=Europe/Moscow
      - MAILDEV_WEB_PORT=1080
      - MAILDEV_SMTP_PORT=1025
    ports:
      - "8080:1080"
      - "1025:1025"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"  


  pg:
    image: postgres
    user: postgres
    environment:
      POSTGRES_DB: shop
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 3s
      retries: 3
  
volumes:
  pgdata: 
  rabbitmq-data:

    